// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int @id @default(autoincrement())
  email       String @unique
  name        String
  password    String
  role        Role @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  createdGroups   Group[]
  createdProjects Project[]
  createdTasks    Task[]
  createdComments Comment[]

  groups          UsersOnGroups[]
  tasks           UsersOnTasks[]
  taskLogs        TaskLog[]

  @@map("users")
}
enum Role {
  USER
  STAFF
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int
  users UsersOnGroups[]

  @@map("groups")
}
model UsersOnGroups {
  user       User  @relation(fields: [userId], references: [id])
  userId     Int
  group      Group @relation(fields: [groupId], references: [id])
  groupId    Int
  role       GroupRole @default(MEMBER)
  assignedAt DateTime @default(now())

  @@id([userId, groupId])
  @@map("users_groups")
}
enum GroupRole {
  MEMBER
  MANAGER
}

model Project {
  id    Int @id @default(autoincrement())
  name  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  
  tasks Task[]
  
  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int

  @@map("projects")
}

model Task {
  id           Int @id @default(autoincrement())
  name         String
  description  String?
  status       Int @default(1)
  startDate    DateTime?
  deadlineDate DateTime?
  deliveryDate DateTime?

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  comments     Comment[]
  
  project      Project @relation(fields: [projectId], references: [id])
  projectId    Int

  creator      User @relation(fields: [creatorId], references: [id])
  creatorId    Int

  taskLogs     TaskLog[]

  users        UsersOnTasks[]
  flags        FlagsOnTasks[]

  @@map("tasks")
}
model TaskLog {
  id              Int @id @default(autoincrement())

  previous_status Int
  applied_status  Int

  user User @relation(fields: [userId], references: [id])
  userId Int

  task Task @relation(fields: [taskId], references: [id])
  taskId Int 

  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  @@map("task_logs")
}
model UsersOnTasks {
  user       User  @relation(fields: [userId], references: [id])
  userId     Int
  task       Task @relation(fields: [taskId], references: [id])
  taskId    Int
  assignedAt DateTime @default(now())

  @@id([userId, taskId])
  @@map("users_tasks")
}

model Comment {
  id         Int @id @default(autoincrement())

  content    String

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  task       Task @relation(fields: [taskId], references: [id])
  taskId     Int

  creator    User @relation(fields: [creatorId], references: [id])
  creatorId  Int

  @@map("comments")
}

model Flag {
  id    Int @id @default(autoincrement())
  name  String
  color String

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  tasks FlagsOnTasks[]

  @@map("flags")
}
model FlagsOnTasks {
  flag       Flag  @relation(fields: [flagId], references: [id])
  flagId     Int
  task       Task @relation(fields: [taskId], references: [id])
  taskId     Int
  assignedAt DateTime @default(now())

  @@id([flagId, taskId])
  @@map("flags_tasks")
}